### Using simple index.html and nginx.conf for frontend
### nginx acts as gateway/LoadBalancer

##Prerequisites for frontend to work

**Backend deployed on kubernetes in namespace mspace with service hello running

## Deploy on kubernetes and run using minikube

**start minikube
minikube start â€” vm-driver=hyperkit (default driver is VirtualBox, for mac it is hyperkit)

**set the context to use minikube
kubectl config use-context minikube

**verify that kubectl is configured to communicate with your cluster
kubectl cluster-info

**Without pushing the docker image to the registry we can still deploy on minikube by setting minikube vm as docker host
**(backend-deployment.yaml has imagePullPolicy: Never which will ensure the image is pulled from local , it can be changed to Always when we want to pull
**image from registry)

eval $(minikube docker-env)


##Now build to create docker image for the app
docker build -t mujeeb/frontend-docker .

##Now deploy frontend on minikube using the deployment.yaml and service.yaml

#kubectl apply -f kubernetes/namespace.yaml -- This step can be skipped as namespace mspace would have been created for backend
kubectl apply -f kubernetes/frontend-deployment.yaml
kubectl apply -f kubernetes/frontend-service.yaml

## check if pods and service is created successfully
kubectl get pods -n mspace
kubectl get svc -n mspace


##To test this service expose this service outside the cluster

##The frontend service is of type LoadBalancer which makes the Service accessible through the minikube service command
## This automatically opens up a browser window using a local IP address that serves your app
minikube service frontend -n mspace


##Note:To run LoadBalancer type in minikube using minikube tunnel(start this service in seperate terminal) without which external IP would not be generated)



